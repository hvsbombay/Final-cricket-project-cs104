// === Full Working JS for Live Match Page with Inning Switch and Reset ===

// let matchData = JSON.parse(localStorage.getItem('matchData')) || null; //after

/* if (!matchData || window.location.search.includes('reset')) {
  // Reset for a fresh match
  matchData = {
    innings: 1,
    battingTeam: document.getElementById('team1').value,
    bowlingTeam: document.getElementById('team2').value,
    score: 0,
    wickets: 0,
    overs: 0,
    balls: 0,
    score1: 0,
    wickets1: 0,
    striker: 'batter1',
    nonstriker: 'batter2',
    currentBatter: { name: 'batter1', runs: 0, balls: 0, fours: 0, sixes: 0 },
    nonStrikeBatter: { name: 'batter2', runs: 0, balls: 0, fours: 0, sixes: 0 },
    currentBowler: { name: 'bowler1', balls: 0, runs: 0, wickets: 0, wides: 0, noBalls: 0 },
    battingScorecard1: {},
    battingScorecard2: {},
    bowlingScorecard1: {},
    bowlingScorecard2: {}
  };
  localStorage.setItem('matchData', JSON.stringify(matchData));
} 


window.onload = () => {
  document.querySelectorAll('.runBtn').forEach(button => {
    button.addEventListener('click', () => {
      const run = button.dataset.run;

      if (run === 'Wicket') {
        matchData.wickets++;
        const nextBatterName = prompt("Enter next batter's name:") || `batter${matchData.wickets + 2}`;
        matchData.currentBatter = {
          name: nextBatterName,
          runs: 0,
          balls: 0,
          fours: 0,
          sixes: 0
        };
      } else {
        const runs = parseInt(run);
        matchData.score += runs;
        matchData.currentBatter.runs += runs;
        matchData.currentBatter.balls++;
        matchData.balls++;
        matchData.currentBowler.balls++;
        matchData.currentBowler.runs += runs;

        if (runs === 4) matchData.currentBatter.fours++;
        if (runs === 6) matchData.currentBatter.sixes++;

        if (runs % 2 === 1) {
          [matchData.currentBatter, matchData.nonStrikeBatter] = [matchData.nonStrikeBatter, matchData.currentBatter];
          [matchData.striker, matchData.nonstriker] = [matchData.nonstriker, matchData.striker];
        }

        if (matchData.balls % 6 === 0) {
          matchData.overs++;
          if (matchData.overs < 2) {
            const nextBowler = prompt("Enter next bowler name:") || matchData.currentBowler.name;
            matchData.currentBowler = { name: nextBowler, balls: 0, runs: 0, wickets: 0, wides: 0, noBalls: 0 };
            [matchData.currentBatter, matchData.nonStrikeBatter] = [matchData.nonStrikeBatter, matchData.currentBatter];
            [matchData.striker, matchData.nonstriker] = [matchData.nonstriker, matchData.striker];
          }
        }
      }

      // End of innings check
      if (matchData.overs === 2) {
        if (matchData.innings === 1) {
          // Switch innings
          matchData.innings = 2;
          matchData.score1 = matchData.score;
          matchData.wickets1 = matchData.wickets;

          [matchData.battingTeam, matchData.bowlingTeam] = [matchData.bowlingTeam, matchData.battingTeam];

          matchData.score = 0;
          matchData.wickets = 0;
          matchData.overs = 0;
          matchData.balls = 0;

          const striker = prompt("Enter striker name:") || 'batter3';
          const nonStriker = prompt("Enter non-striker name:") || 'batter4';
          const newBowler = prompt("Enter bowler name:") || 'bowler2';

          matchData.striker = striker;
          matchData.nonstriker = nonStriker;
          matchData.currentBatter = { name: striker, runs: 0, balls: 0, fours: 0, sixes: 0 };
          matchData.nonStrikeBatter = { name: nonStriker, runs: 0, balls: 0, fours: 0, sixes: 0 };
          matchData.currentBowler = { name: newBowler, balls: 0, runs: 0, wickets: 0, wides: 0, noBalls: 0 };

          alert("Innings over! Second innings starting now.");
        } else {
          localStorage.setItem('matchData', JSON.stringify(matchData));
          window.location.href = 'summary.html';
          return;
        }
      }

      updateLive(matchData);
    });
  });

  updateLive(matchData);
};
*/